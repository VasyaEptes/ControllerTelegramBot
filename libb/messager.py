import asyncio
from telethon import errors
import time

from telethon import TelegramClient, events
t = 0
n = 0
request_message = ''


QUERY_BRANCH_1 = ["–§–æ–Ω–¥—ã", "–°–ø–∏—Å–æ–∫ —Ñ–æ–Ω–¥–æ–≤", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "–ù–∞–∑–∞–¥"]
QUERY_BRANCH_2 = ["–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞", "üîù –¢–û–ü 100", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "–°–æ–±—ã—Ç–∏—è", "–ù–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã", "–≠–º–∏—Å—Å–∏—è",
                  "–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è", "–ù–∞–∑–∞–¥"]
QUERY_BRANCH_3 = ["–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "–ù–∞–ø–∏—Å–∞—Ç—å", "–ü–æ–ª–∏—Ç–∏–∫–∞", "–û—Ñ–µ—Ä—Ç–∞", "–ù–∞–∑–∞–¥"]
QUERY_BRANCH_4 = ["–ê–∫–∫–∞—É–Ω—Ç", "–ò–Ω—Ñ–æ", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–Ø–∑—ã–∫", "–ê–∫–∫–∞—É–Ω—Ç", "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", "–ü–æ—Ä—Ç—Ñ–µ–ª—å", "–û–ø–ª–∞—Ç–∞", "–°–∏–≥–Ω–∞–ª—ã",
                  "–°–∏–≥–Ω–∞–ª—ã(–ò–Ω—Ñ–æ)", "–ù–∞–∑–∞–¥"]
QUERY_ARRAY = [QUERY_BRANCH_1, QUERY_BRANCH_2, QUERY_BRANCH_3]
QUERY_BRANCH_TEST = [["üîù –¢–û–ü 100"]]


async def run(app):
    global n
    '''–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞'''
    client = TelegramClient('anon', app.app_id, app.app_hash)
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    @client.on(events.NewMessage(chats=(app.bot_name)))
    async def normal_handler(event):
        global t, request_message
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
        # response = event.message.to_dict()
        sender = await event.get_sender()
        response = await client.get_messages(sender.username)
        # print(response)
        from_id = None
        """–ü–æ–ª—É—á–∞–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if response[-1].to_dict().get('peer_id') is not None:
            from_id = response[-1].to_dict().get('peer_id').get('user_id')
        """–ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è. –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å"""
        url = ''
        if response[-1].to_dict().get('entities') is not None and response[-1].to_dict().get('entities') != []:
            url = response[-1].to_dict().get('entities').get('url')
        """–°—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞"""
        t = (time.time()) - t
        """–ó–∞–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞"""
        response_message = response[-1].to_dict()['message']
        print(response_message, url)
        client_id = app.config['telegram_client']['id']
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –æ—Ç –±–æ—Ç–∞ web3space –∏ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ """
        if from_id != client_id and t > 1:
            app.log_error.error(f'Request: {request_message}, From_id: {from_id}, Error: timeout error')
        else:
            app.log_debug.debug(f'Request: {request_message}, From_id: {from_id}, Execution time: {t}')
        await response_processing(app=app, response=response_message, client=client)
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª—ã –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        if 'üèÜ üîù –¢–æ–ø 100' in response_message:
            pass
            await click_loop(app=app, client=client, event=event, text='‚ñ∂', count_check_string=4)
            await click_loop(app=app, client=client, event=event, text='‚óÄ', count_check_string=4)
            await click_one(app=app, client=client, event=event, text='–°—Ä–∞–≤–Ω–∏—Ç—å –≤—Å–µ')
            await click_loop(app=app, client=client, event=event, text='‚ñ∂', count_check_string=4)
            await click_loop(app=app, client=client, event=event, text='‚óÄ', count_check_string=4)
        if '–§–æ–Ω–¥—ã 7–¥–Ω 30–¥–Ω –ë–∞–ª–ª—ã –¢–∏–∫–µ—Ä' in response_message or '–§–æ–Ω–¥—ã —Å–µ–≥–æ–¥–Ω—è' in response_message or\
                'üì∂ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏' in response_message or '–¢–æ–ø —Ç–æ–∫–µ–Ω–æ–≤ —Å —ç–º–∏—Å—Å–∏–µ–π 100-90 %' in response_message:
            await click_loop(app=app, client=client, event=event, text='‚ñ∂', count_check_string=4)
            await click_loop(app=app, client=client, event=event, text='‚óÄ', count_check_string=4)
        if '–¢–æ–ø —Ç–æ–∫–µ–Ω–æ–≤ —Å –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π' in response_message:
            await click_loop(app=app, client=client, event=event, text='‚ñ∂', count_check_string=5)
            await click_loop(app=app, client=client, event=event, text='‚óÄ', count_check_string=5)
        if 'üèÜ üîù –°–æ–±—ã—Ç–∏—è' in response_message or 'üèÜ üîù –¢–æ–ø 10 –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ 30 –¥–Ω–µ–π' in response_message:
            await click_loop(app=app, client=client, event=event, text='‚ñ∂', count_check_string=2)
            await click_loop(app=app, client=client, event=event, text='‚óÄ', count_check_string=2)
    """–ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç"""
    await client.start()
    """–í —Ü–∏–∫–ª–µ –ø–æ—Å—ã–ª–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∫–æ–º–∞–Ω–¥"""
    for query in QUERY_ARRAY:
        while n < len(query):
            global request_message
            request_message = query[n]
            print(n, request_message)
            await send_one_message(app=app, client=client, message=query[n])
            await asyncio.sleep(5)
    """–ö–ª–∏–µ–Ω—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—ã. –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é"""
    await client.run_until_disconnected()


async def click_loop(app, client, event, text, count_check_string):
    sender = await event.get_sender()
    messages = await client.get_messages(sender.username)
    first_last_coin_of_message = ''
    index = 0
    while True:
        t_start = (time.time())
        await messages[0].click(text=text)
        await asyncio.sleep(1)
        messages = await client.get_messages(sender.username)
        t_finish = (time.time())
        if t_finish - t_start > 2:
            app.log_error.error(f'Click button: {text}, Execution time: {t_finish - t_start}, Error: timeout error')
        else:
            app.log_debug.debug(f'Click button: {text}, Execution time: {t_finish - t_start}')
        message = messages[-1].to_dict().get('message')
        last_coin_of_message = message.split('\n')[count_check_string]
        print(message.split('\n'))
        await asyncio.sleep(2)
        if last_coin_of_message == first_last_coin_of_message:
            print(f'finish click on button "{text}"')
            break
        if index == 0:
            first_last_coin_of_message = last_coin_of_message
            index = 1


async def click_one(app, client, event, text):
    sender = await event.get_sender()
    messages = await client.get_messages(sender.username)
    t_start = (time.time())
    await messages[0].click(text=text)
    await asyncio.sleep(1)
    messages = await client.get_messages(sender.username)
    t_finish = (time.time())
    if t_finish - t_start > 2:
        app.log_error.error(f'Click button: {text}, Execution time: {t_finish - t_start}, Error: timeout error')
    else:
        app.log_debug.debug(f'Click button: {text}, Execution time: {t_finish - t_start}')
    message = messages[-1].to_dict().get('message')
    print(message.split('\n'))
    await asyncio.sleep(2)


async def send_one_message(app, client, message):
    global t
    while True:
        try:
            await client.send_message(app.bot_name, message)
            t = (time.time())
            break
        except errors.FloodWaitError as e:
            app.log_error.error(e, exc_info=True)
            print('Flood for', e.seconds)
            await asyncio.sleep(e.seconds)


async def response_processing(app, response, client):
    global n
    if '–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' in response:
        messages = await client.get_messages(app.bot_name)
        await messages[0].click()
        await asyncio.sleep(3)
    else:
        n += 1
