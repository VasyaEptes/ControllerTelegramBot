import asyncio
import time
import sys
import re
from telethon import TelegramClient, events

t = 0
n = 0
request_message = ''


async def run(app):
    global n
    '''–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞'''
    client = TelegramClient('anon', app.app_id, app.app_hash)
    app.client = client
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        @client.on(events.NewMessage(chats=(app.bot_name)))
        async def normal_handler(event):
            global t, request_message
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
            # sender = await event.get_sender()
            # username = sender.username
            username = '@Web3Space_bot'
            response = await client.get_messages(username)
            from_id = None
            """–ü–æ–ª—É—á–∞–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è"""
            if response[-1].to_dict().get('peer_id') is not None:
                from_id = response[-1].to_dict().get('peer_id').get('user_id')
            """–°—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞"""
            t_r = (time.time()) - t
            """–ó–∞–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞"""
            # print(response[-1])
            response_message = response[-1].to_dict()['message']
            client_id = app.config['telegram_client']['id']
            """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –æ—Ç –±–æ—Ç–∞ web3space –∏ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ """
            if from_id != client_id and t_r > 2:
                app.log_error.error(f'Request: {request_message}, From_id: {from_id}, time: {t_r}, Error: timeout error')
            else:
                app.log_debug.debug(f'Request: {request_message}, From_id: {from_id}, Execution time: {t_r}')
            await response_processing(app=app, response=response_message, client=client)
            await data_processing(app=app, response=response_message)
            """–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª—ã –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
            if '–¢–æ–ø 100' in response_message:
                await click_loop(app=app, client=client, event=event, texts=['‚ñ∂', '‚óÄ', '–°—Ä–∞–≤–Ω–∏—Ç—å –≤—Å–µ'],
                                 count_check_string=6)
            elif '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¢–æ–ø 15' in response_message:
                await click_loop(app=app, client=client, event=event, texts=['‚ñ∂', '‚óÄ'],
                                 count_check_string=6)
                app.status_next = True
                await asyncio.sleep(1)
            elif '–§–æ–Ω–¥—ã 7–¥–Ω 30–¥–Ω –ë–∞–ª–ª—ã –¢–∏–∫–µ—Ä' in response_message or '–§–æ–Ω–¥—ã —Å–µ–≥–æ–¥–Ω—è' in response_message or\
                    'üì∂ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏' in response_message or '–¢–æ–ø —Ç–æ–∫–µ–Ω–æ–≤ —Å —ç–º–∏—Å—Å–∏–µ–π' in response_message:
                await click_loop(app=app, client=client, event=event, texts=['‚ñ∂', '‚óÄ'], count_check_string=4)
                app.status_next = True
                await asyncio.sleep(1)
            elif '–¢–æ–ø —Ç–æ–∫–µ–Ω–æ–≤ —Å –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π' in response_message:
                await click_loop(app=app, client=client, event=event, texts=['‚ñ∂', '‚óÄ'], count_check_string=5)
                await asyncio.sleep(1)
            elif 'üèÜ üîù –°–æ–±—ã—Ç–∏—è' in response_message or 'üèÜ üîù –¢–æ–ø 10 –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤' in response_message:
                await click_loop(app=app, client=client, event=event, texts=['‚ñ∂', '‚óÄ'], count_check_string=4)
                await asyncio.sleep(1)
            app.status_next = True
    except Exception as e:
        app.log_error.error(e, exc_info=True)
        app.sms(f'–ë–æ—Ç {app.config["my_bot_name"]} ERROR: –ë–æ—Ç —É–ø–∞–ª –∏ —Ç—Ä–µ–±—É–µ—Ç –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞.')
    """–ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç"""
    try:
        await client.start()
        await client.run_until_disconnected()
    except Exception as e:
        app.log_error.error('Connection to Telegram failed 5 times \n', exc_info=True)
        app.sms(f'–ë–æ—Ç {app.config["my_bot_name"]} ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram')
        sys.exit()
    """–ö–ª–∏–µ–Ω—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—ã. –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é"""


async def click_loop(app, client, event, texts, count_check_string=0):
    for text in texts:
        count = 0
        sender = await event.get_sender()
        username = sender.username
        t_start = (time.time())
        messages = await client.get_messages(username)
        first_last_coin_of_message = ''
        index = 0
        if text == '–°—Ä–∞–≤–Ω–∏—Ç—å –≤—Å–µ':
            print(text)
            try:
                await messages[0].click(text=text)
            except:
                print('ERROR click in method "click_one"')
            t_finish = (time.time())
            if t_finish - t_start > 2:
                app.log_error.error(f'Click button: {text}, Execution time: {t_finish - t_start}, Error: timeout error')
            else:
                app.log_debug.debug(f'Click button: {text}, Execution time: {t_finish - t_start}')
        else:
            while True:
                if count == 10:
                    print(f'finish click on button "{text}"')
                    break
                print(text)
                try:
                    await messages[0].click(text=text)
                    count += 1
                except:
                    print('ERROR click in method "click_loop"')
                await asyncio.sleep(0.5)
                messages = await client.get_messages(username)
                message = messages[-1].to_dict().get('message')
                await data_processing(app=app, response=message)
                t_finish = (time.time())
                t_result = t_finish - t_start
                if t_result > 2:
                    app.log_error.error(f'Click button: {text}, Execution time: {t_result}, Error: timeout error')
                else:
                    app.log_debug.debug(f'Click button: {text}, Execution time: {t_result}')
                last_coin_of_message = message
                await asyncio.sleep(0.5)
                if last_coin_of_message == first_last_coin_of_message:
                    print(f'finish click on button "{text}"')
                    break
                if index == 0:
                    first_last_coin_of_message = last_coin_of_message
                    index = 1


async def data_processing(app, response):
    app.work_status = True
    if '–¢–æ–ø 100' in response:
        try:
            message_list = response.split('\n')
            if len(message_list) > 6:
                check_line = message_list[4].split() + [message_list[5].split(':')[-1].strip()]
                data = {'symbol': check_line[2].split('/')[-1].replace(']', ''),
                        'funds_count': int(check_line[3])}
                capitalization = check_line[4]
                category = check_line[5]
                if capitalization != 'N/A':
                    capitalization_0 = float(capitalization)
                    coef_str = check_line[5]
                    if coef_str == '–º–ª—Ä–¥.':
                        coef = 1_000_000_000
                    elif coef_str == '–º–ª–Ω.':
                        coef = 1_000_000
                    elif coef_str == '—Ç—ã—Å.':
                        coef = 1000
                    else:
                        coef = 1
                    capitalization = int(capitalization_0 * coef)
                    category = check_line[6]
                data['capitalization'] = capitalization
                p = re.compile(r'/\d+ (.*)')
                try:
                    category = p.findall(category)[0]
                except:
                    category = '-99'
                data['category'] = category
                coin = app.collection.find_one({'symbol': data['symbol']})
                try:
                    status = True
                    while status is True:
                        if data['capitalization'] != int(coin['capitalization']):
                            status = False
                        if data['category'] != coin['category']:
                            status = False
                        if data['funds_count'] != len(coin['fund']):
                            status = False
                        break
                    if status is False:
                        coin_log = {'symbol': coin['symbol'], 'funds_count': len(coin['fund']), 'capitalization':
                                    int(coin['capitalization']), 'category': coin['category']}
                        app.log_error.error(f'Incorrect data for the query "–¢–æ–ø 100". Symbol: {data["symbol"]}\n\n'
                                            f'data from telegram bot: {data}\ndata from db: {coin_log}\n{"*"*10}')
                        app.work_status = False
                except Exception as e:
                    app.log_error.error(f'{e}\n{coin}\n', exc_info=True)
            else:
                app.log_error.error(f'Incorrect data for the query "–¢–æ–ø 100"')
                app.work_status = False
        except Exception as e:
            app.log_error.error(f'{e}', exc_info=True)
            app.work_status = False
    if '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞' in response:
        if '–¶–µ–Ω–∞ BTC' not in response or '–¶–µ–Ω–∞ ETH' not in response:
            app.log_error.error('Incorrect data for the query "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞".')
            app.work_status = False
    if '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¢–æ–ø 15' in response:
        if len(response.split('\n')) < 21:
            app.log_error.error('Incorrect data for the query "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¢–æ–ø 15".')
            app.work_status = False
    if '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏' in response:
        if '‚Ññ   –ò–Ω—Ç–µ—Ä–µ—Å/–ö–∞–ø–∏—Ç–∞–ª.    –ù–∞–∑–≤–∞–Ω–∏–µ' not in response or len(response.split('\n')) < 15:
            app.log_error.error('Incorrect data for the query "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏".')
            app.work_status = False
    if '–°–æ–±—ã—Ç–∏—è' in response:
        if len(response.split('\n')) < 10:
            app.log_error.error('Incorrect data for the query "–°–æ–±—ã—Ç–∏—è".')
            app.work_status = False
    if '–¢–æ–ø 10 –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤' in response:
        if len(response.split('\n')) < 5:
            app.log_error.error('Incorrect data for the query "–ù–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã".')
            app.work_status = False
    if '–¢–æ–ø —Ç–æ–∫–µ–Ω–æ–≤ —Å —ç–º–∏—Å—Å–∏–µ–π' in response:
        message_list = response.split('\n')
        status = True
        try:
            if len(message_list) > 6:
                check_line = message_list[4].split() + [message_list[5].split(':')[-1].strip()]
                data = {'symbol': check_line[3].split('/')[-1].replace(']', ''),
                        'funds_count': int(check_line[2]), 'coef_issue': float(check_line[1].replace('%', ''))}
                p = re.compile(r'/\d+ (.*)')
                category = check_line[4]
                try:
                    category = p.findall(category)[0]
                except:
                    category = '-99'
                data['category'] = category
                coin = app.collection.find_one({'symbol': data['symbol']})
                try:
                    while status is True:
                        if data['coef_issue'] != float(coin['coef issue']):
                            status = False
                        if data['category'] != coin['category']:
                            status = False
                        if data['funds_count'] != len(coin.get('fund')):
                            status = False
                        break
                    if status is False:
                        coin_log = {'symbol': coin['symbol'], 'funds_count': len(coin['fund']), 'coef_issue':
                                    float(coin['coef issue']), 'category': coin['category']}
                        app.log_error.error(f'Incorrect data for the query "–¢–æ–ø —Ç–æ–∫–µ–Ω–æ–≤ —Å —ç–º–∏—Å—Å–∏–µ–π 90-100 %". Symbol: '
                                            f'{data["symbol"]}\n\ndata from telegram bot: {data}\ndata from db: '
                                            f'{coin_log}\n{"*" * 10}')
                        app.work_status = False
                except Exception as e:
                    app.log_error.error(f'{e}\n{coin}\n', exc_info=True)
            else:
                app.log_error.error(f'Incorrect data for the query "–¢–æ–ø —Ç–æ–∫–µ–Ω–æ–≤ —Å —ç–º–∏—Å—Å–∏–µ–π 90-100 %"')
                app.work_status = False
        except Exception as e:
            app.log_error.error(f'{e}', exc_info=True)
            app.work_status = False
    if '–¢–æ–ø —Ç–æ–∫–µ–Ω–æ–≤ —Å –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π' in response:
        message_list = response.split('\n')
        try:
            if len(message_list) > 7:
                check_line = message_list[5].split() + [message_list[6].split(':')[-1].strip()]
                data = {'symbol': check_line[4].split('/')[-1].replace(']', ''),
                        'funds_count': int(check_line[3])}
                capitalization_0 = float(check_line[1])
                coef_str = check_line[2]
                if coef_str == '–º–ª—Ä–¥.':
                    coef = 1_000_000_000
                elif coef_str == '–º–ª–Ω.':
                    coef = 1_000_000
                else:
                    coef = 1
                capitalization = int(capitalization_0 * coef)
                data['capitalization'] = capitalization
                p = re.compile(r'/\d+ (.*)')
                category = check_line[4]
                try:
                    category = p.findall(category)[0]
                except:
                    category = '-99'
                data['category'] = category
                coin = app.collection.find_one({'symbol': data['symbol']})
                try:
                    status = True
                    while status is True:
                        if data['capitalization'] != float(coin['capitalization']):
                            status = False
                        if data['category'] != coin['category']:
                            status = False
                        if data['funds_count'] != len(coin['fund']):
                            status = False
                        break
                    if status is False:
                        coin_log = {'symbol': coin['symbol'], 'funds_count': len(coin['fund']), 'capitalization':
                                    int(coin['capitalization']), 'category': coin['category']}
                        app.log_error.error(f'Incorrect data for the query "–¢–æ–ø —Ç–æ–∫–µ–Ω–æ–≤ —Å –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π".'
                                            f' Symbol: {data["symbol"]}\n\ndata from telegram bot: {data}\ndata from db: '
                                            f'{coin_log}\n{"*" * 10}')
                        app.work_status = False
                except Exception as e:
                    app.log_error.error(f'{e}\n{coin}\n', exc_info=True)
            else:
                app.log_error.error(f'Incorrect data for the query "–¢–¢–æ–ø —Ç–æ–∫–µ–Ω–æ–≤ —Å –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π"')
                app.work_status = False
        except Exception as e:
            app.log_error.error(f'{e}', exc_info=True)
            app.work_status = False
    if '–°–ø–∏—Å–æ–∫ —Ñ–æ–Ω–¥–æ–≤' in response:
        if len(response.split('\n')) < 17:
            app.log_error.error('Incorrect data for the query "–°–ø–∏—Å–æ–∫ —Ñ–æ–Ω–¥–æ–≤".')
            app.work_status = False
    if '–§–æ–Ω–¥—ã 7–¥–Ω 30–¥–Ω –ë–∞–ª–ª—ã –¢–∏–∫–µ—Ä' in response:
        if len(response.split('\n')) < 5:
            app.log_error.error('Incorrect data for the query "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏".')
            app.work_status = False
    if '–§–æ–Ω–¥—ã —Å–µ–≥–æ–¥–Ω—è' in response:
        if len(response.split('\n')) < 15:
            app.log_error.error('Incorrect data for the query "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏".')
            app.work_status = False
    if response == '':
        print('Empty')
        app.log_error.error('Incorrect data for the query "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏".')
        app.work_status = False


async def response_processing(app, response, client):
    global n
    if '–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' in response:
        messages = await client.get_messages(app.bot_name)
        await messages[0].click()
        await asyncio.sleep(3)
        n = 0
